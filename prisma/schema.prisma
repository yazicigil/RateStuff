// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // runtime (pooler) URL
  directUrl = env("DIRECT_URL")     // migrate/push (direct 5432) URL
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  maskedName String?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  isAdmin    Boolean  @default(false)
  welcomeEmailSentAt DateTime?

  items        Item[]
  ratings      Rating[]
  comments     Comment[]
  commentVotes CommentVote[]
  saved        SavedItem[]    // ← eklendi
  reports      Report[]
}

model Item {
  id           String    @id @default(cuid())
  name         String
  description  String
  imageUrl     String?
  createdAt    DateTime  @default(now())
  editedAt     DateTime?
  suspendedAt DateTime?
  createdById  String?
  createdBy    User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
  dedupeKey    String?   @unique
  ratings   Rating[]
  comments  Comment[]
  tags      ItemTag[]
  savedBy   SavedItem[]  // ← eklendi
  reports   Report[]
}

model Comment {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  text      String
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  editedAt  DateTime?

  item  Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes CommentVote[]

  @@unique([itemId, userId])
}

model Rating {
  id        String   @id @default(cuid())
  itemId    String
  userId    String
  value     Int      @default(0)
  createdAt DateTime @default(now())
  editedAt  DateTime?

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
}

model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  items ItemTag[]
}

model ItemTag {
  itemId String
  tagId  String

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
}

model Report {
  id         String   @id @default(cuid())
  itemId     String
  userId     String
  reportdesc String
  createdAt  DateTime @default(now())

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([itemId, userId])
  @@index([itemId])
}

model SavedItem {
  userId   String
  itemId   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@index([userId])
  @@index([itemId])
}

model CommentVote {
  id        String  @id @default(cuid())
  commentId String
  userId    String
  value     Int     // 1 = upvote, -1 = downvote

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

enum NotificationType {
  COMMENT_ON_OWN_ITEM
  RATING_ON_OWN_ITEM
  TAG_PEER_NEW_ITEM
  REPORT_OPENED
  REPORT_UPDATED
  REPORT_RESOLVED
  MILESTONE_REACHED
  COMMENT_UPVOTED
  ADMIN_BROADCAST
  ADMIN_DIRECT
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  body      String
  link      String?
  image     String?
  data      Json?
  readAt    DateTime?
  createdAt DateTime         @default(now())
  eventKey  String?          @unique

  @@index([userId, createdAt(sort: Desc)])
}

model NotificationPreference {
  id                 String  @id @default(cuid())
  userId             String  @unique
  emailEnabled       Boolean @default(false)
  pushEnabled        Boolean @default(false)
  commentOnOwnItem   Boolean @default(true)
  ratingOnOwnItem    Boolean @default(true)
  tagPeerNewItem     Boolean @default(true)
  reportEvents       Boolean @default(true)
  milestones         Boolean @default(true)
  commentUpvoted     Boolean @default(true)
  emailDigest        String  @default("none")
}
model Presence {
  id        String   @id @default(cuid())
  userId    String?  // giriş yapmış kullanıcı varsa
  lastSeen  DateTime @updatedAt
  createdAt DateTime @default(now())
}